import logging
import os
from datetime import datetime, timedelta
from random import randint
from typing import Callable, List

import telebot
from sqlalchemy import func, desc
from telebot import asyncio_filters
from telebot.async_telebot import AsyncTeleBot, ExceptionHandler
from telebot.asyncio_storage import StatePickleStorage
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, InputMediaPhoto
from yaml import SafeLoader, load

from .db import Session, User
from .s3 import dump_s3

PROMO_15 = os.getenv("PROMO_15")
EXCURSION_START = datetime(2022, 10, 1)

# Logging
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)


def log_user_answer(expected: str, answer: str) -> None:
    logger.info(f"Expected: {expected} Answer: {answer}")


# Message content
with open("./text.yaml", "r") as f:
    texts = load(f, SafeLoader)


# Bot instance
class MyExceptionHandler(ExceptionHandler):
    def handle(self, exception):
        logger.error(exception)


bot = AsyncTeleBot(
    os.getenv("TELEGRAM_TOKEN"),
    parse_mode="Markdown",
    state_storage=StatePickleStorage(),
    exception_handler=MyExceptionHandler(),
)

remove_keyboard = ReplyKeyboardRemove()


def one_btn_keyboard(text: str):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(text)
    return markup


get_going_markup = one_btn_keyboard("–ò–¥–µ–º –¥–∞–ª—å—à–µ")
farewell_markup = one_btn_keyboard("–í –¥–æ–±—Ä—ã–π –ø—É—Ç—å!")
giveup_markup = one_btn_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
luther_what_markup = one_btn_keyboard("–¢–∞–∫ –°–º–æ–ª–µ–Ω—Å–∫–æ–µ –∏–ª–∏ –õ—é—Ç–µ—Ä–∞–Ω—Å–∫–æ–µ?")

GET_GOING_TEXT = "–ù–∞–∂–º–∏ '–ò–¥–µ–º –¥–∞–ª—å—à–µ', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é"
WRONG_ANSWER_TEXT = "–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–æ–ª—å—à–µ –Ω–µ—Ç"
TRY_AGAIN_TEXT = "–ú–æ–∂–µ—à—å –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—â—ë {}"
CONGRATS = ["–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!", "–í–µ—Ä–Ω–æ!", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–í —Ç–æ—á–∫—É!"]


def random_congrats():
    return CONGRATS[randint(0, len(CONGRATS) - 1)]


# Bot helpers
async def log_state(message):
    state = await bot.current_states.get_state(message.from_user.id, message.chat.id)
    logger.info(f"State: {state}")


async def send_messages(
    chat_id: str,
    messages: List[str],
    markup=None,
):
    for msg in messages:
        if isinstance(msg, str):
            await bot.send_message(chat_id, msg, reply_markup=markup)
        else:
            if msg["type"] == "photo":
                await bot.send_photo(
                    chat_id,
                    msg["file_id"],
                    reply_markup=markup,
                    caption=msg.get("caption", None),
                )
            elif msg["type"] == "location":
                await bot.send_location(
                    chat_id,
                    latitude=msg["lat"],
                    longitude=msg["lng"],
                    horizontal_accuracy=25,
                )
            elif msg["type"] == "audio":
                await bot.send_audio(chat_id, msg["file_id"], reply_markup=markup)
            elif msg["type"] == "document":
                await bot.send_document(
                    chat_id,
                    msg["file_id"],
                    reply_markup=markup,
                    caption=msg.get("caption", None),
                )
            elif msg["type"] == "media_group":
                logger.debug(f"Media: {msg['media']}")
                media = [InputMediaPhoto(media=m["media"], caption=m.get("caption", None)) for m in msg["media"]]
                await bot.send_media_group(chat_id, media)


# ===== Message handlers =====
@bot.message_handler(state="*", commands=["setstate"])
async def set_state(message):
    new_state = message.text.split(" ")[1]
    msg = f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_state}"
    await bot.set_state(message.from_user.id, new_state, message.chat.id)
    await bot.send_message(message.chat.id, msg)


@bot.message_handler(state="*", commands=["stats"])
async def stats(message):
    today_midnight = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    days_ago = today_midnight - timedelta(days=7)
    with Session.begin() as s:
        users_count = s.query(func.count(User.id)).scalar()
        users_finished = s.query(func.count(User.id)).filter(User.finished_at != None).scalar()
        users_per_day = (
            s.query(func.strftime("%Y-%m-%d", User.finished_at), func.count(User.id))
            .group_by(func.strftime("%Y-%m-%d", User.finished_at))
            .order_by(desc(func.strftime("%Y-%m-%d", User.finished_at)))
            .filter(User.finished_at >= days_ago)
            .all()
        )
    daily_stats = "\n".join([f"{i[0]} {i[1]}" for i in users_per_day])
    msg = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {users_count}\n"
        + f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫–≤–µ—Å—Ç: {users_finished}\n"
        + f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n{daily_stats}\n"
    )
    await bot.send_message(message.chat.id, msg)


@bot.message_handler(state="*", commands=["start"])
async def start_ex(message):
    """
    –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.
    """
    # State
    await log_state(message)
    await bot.delete_state(message.from_user.id, message.chat.id)
    await bot.set_state(message.from_user.id, "start", message.chat.id)
    # Messages
    await send_messages(message.chat.id, texts["–≤–≤–æ–¥–Ω–∞—è"], markup=luther_what_markup)
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User(message.from_user)
    # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ s3
    dump_s3(user.to_dict(), f"users/started/{message.from_user.id}.json")
    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    try:
        with Session.begin() as s:
            user = user.get_or_create(s)
            if user.started_at == None:
                user.started_at = datetime.utcnow()
                s.commit()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É", exc_info=e)


@bot.message_handler(state="start")
async def about_luther(message):
    # State
    await log_state(message)
    await bot.set_state(message.from_user.id, "–õ—é—Ç–µ—Ä", message.chat.id)
    # Messages
    await send_messages(message.chat.id, texts["–õ—é—Ç–µ—Ä"], markup=farewell_markup)


@bot.message_handler(state="–õ—é—Ç–µ—Ä")
async def enterance(message):
    # State
    await log_state(message)
    await bot.set_state(message.from_user.id, "–≤—Ö–æ–¥", message.chat.id)
    # Messages
    await send_messages(message.chat.id, texts["–≤—Ö–æ–¥"], markup=get_going_markup)


@bot.message_handler(state="–ß–∏—á–∞–≥–æ–≤–∞")
async def finish_ex(message):
    """
    –§–∏–Ω–∏—à —ç–∫—Å–∫—É—Ä—Å–∏–∏.
    –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≥–µ—Ä–æ—è –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    """
    await log_state(message)
    await bot.set_state(message.from_user.id, "finish", message.chat.id)
    # –ù–∞—à–µ –ø–æ—á—Ç–µ–Ω–∏–µ
    await send_messages(message.chat.id, texts["–ø–æ–±–µ–¥–∞"], markup=remove_keyboard)
    # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –û–•–í
    await send_messages(message.chat.id, texts["–û–•–í"], markup=remove_keyboard)
    # –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤
    await bot.send_message(
        message.chat.id,
        "–≠—Ç–æ –Ω–∞—à –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç –ø–æ –∫–ª–∞–¥–±–∏—â—É. –ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –æ—Ç–∑—ã–≤ üôè –õ—é–±–æ–π! –î–∞–∂–µ –ø–ª–æ—Ö–æ–π, –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π. –û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å üëá",
    )
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ –≤ s3
    user = User(message.from_user)
    dump_s3(user.to_dict(), f"users/finished/{message.from_user.id}.json")
    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
    with Session.begin() as s:
        user = user.get_or_create(s)
        # –ó–∞–ø–∏—à–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if user.finished_at == None:
            user.finished_at = datetime.utcnow()
            s.commit()


@bot.message_handler(state="finish")
async def after_finish_ex(message):
    await log_state(message)
    # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç–∑—ã–≤ –≤ s3
    if "–∏–¥–µ–º –¥–∞–ª—å—à–µ" not in message.text.lower():
        dump_s3(message.text, f"users/feedback/{message.from_user.id}/{message.message_id}.json")
    await bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –Ω–∞–ø–∏—Å–∞–≤ –µ—â—ë –ø–∞—Ä—É –ª–∞—Å–∫–æ–≤—ã—Ö",
    )


answer_checkers = {
    "–≠–Ω–≥–µ–ª—å–≥–∞—Ä–¥—Ç": lambda m: "13" in m,
    "–î–µ—Ä–µ–≤–æ": lambda m: "5" in m,
    "–•–æ—Å–µ": lambda m: "–≥–µ—Å—Å" in m,
    "–ë–µ—Ä–¥": lambda m: "—Ç–∞–º–∞—Ä–∞" in m,
    "–ì—Ä–∏–º–º": lambda m: "1933" in m,
    "–ü–∞—Ä–ª–∞–Ω–¥": lambda m: "–æ–±–ø" in m or "–æ.–±.–ø." in m or "–æ–±–ª—Å–æ–≤–µ—Ç" in m or "–æ—Å–æ–∞–≤–∏–∞—Ö–∏–º" in m,
    "–°–∏–º–∞–Ω—Å–∫–∏–π": lambda m: "—Å–µ–≤–∫–∞–±–µ–ª—å" in m,
    "–ü—Ä–æ—Ä–æ–∫–æ–≤": lambda m: "—Ñ–∞–Ω–¥–µ—Ä" in m or "—Ñ–ª–∏—Ç" in m,
    "–ß–∏–Ω–∏–∑–µ–ª–ª–∏": lambda m: "34" in m,
    "–ì–æ—Ä–≤–∏—Ü": lambda m: "—ç—Ö" in m or "—Ç–æ–≤–∞—Ä–∏—â–∏" in m,
    "–ì—Ä–µ–π–≥": lambda m: "–ø—Ä–∞—Å–∫–æ–≤" in m,
    "–ë–∞—É—ç—Ä–º–∞–π—Å—Ç–µ—Ä": lambda m: "–æ—Å—Ç—Ä–æ–≤" in m or "–º–µ—Ä—Ç–≤—ã—Ö" in m,
    "–ë–µ–∫–º–∞–Ω": lambda m: "xii" in m or "12" in m,
    "–í–æ–ª—å—Ñ": lambda m: "–ø–µ—Å–æ—á–Ω—ã–µ" in m or "—á–∞—Å—ã" in m,
    "–ì–æ–ª–≥–æ—Ñ–∞": lambda m: "—á–µ—Ä–µ–ø" in m,
    "–ß–∏—á–∞–≥–æ–≤–∞": lambda m: "—É—Ä–æ–±–æ—Ä–æ—Å" in m,
}


class QuestionHandler:
    def __init__(self, step: str, prev_step: str, is_correct: Callable[[str], bool]):
        self.step = step
        self.is_correct = is_correct

        bot.register_message_handler(self.question, state=prev_step)
        bot.register_message_handler(self.answer, state=f"–°–ø—Ä–æ—Å–∏–ª_{self.step}")

    async def question(self, message):
        await log_state(message)
        await bot.set_state(message.from_user.id, f"–°–ø—Ä–æ—Å–∏–ª_{self.step}", message.chat.id)
        await send_messages(
            message.chat.id,
            texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"][self.step]["–≤–æ–ø—Ä–æ—Å"],
            markup=remove_keyboard,
        )

    async def answer(self, message):
        await log_state(message)
        log_user_answer(texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"][self.step]["–æ—Ç–≤–µ—Ç"], message.text)
        with Session.begin() as s:
            user = User(message.from_user).get_or_create(s)
            user_gave_up = "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in message.text.lower() and user.try_count > 0
            user_answered = self.is_correct(message.text.lower())
            if user_gave_up or user_answered:
                await bot.set_state(message.from_user.id, f"{self.step}", message.chat.id)
                if user_gave_up:
                    user.try_count -= 1
                elif user_answered:
                    await bot.send_message(message.chat.id, random_congrats())
                await send_messages(message.chat.id, texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"][self.step].get("–∫—Å—Ç–∞—Ç–∏", []))
                await bot.send_message(message.chat.id, GET_GOING_TEXT, reply_markup=get_going_markup)
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
                if user.try_count > 0:
                    await bot.send_message(
                        message.chat.id,
                        TRY_AGAIN_TEXT.format(user.try_count),
                        reply_markup=giveup_markup,
                    )
                else:
                    await bot.send_message(message.chat.id, WRONG_ANSWER_TEXT)
            s.commit()
            s.close()


# –ù–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
prev_step = "–≤—Ö–æ–¥"
for point in texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"].keys():
    try:
        checker = answer_checkers[point]
    except KeyError:
        raise RuntimeError(f"–ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {point}")
    QuestionHandler(step=point, prev_step=prev_step, is_correct=checker)
    prev_step = point


bot.add_custom_filter(asyncio_filters.StateFilter(bot))
