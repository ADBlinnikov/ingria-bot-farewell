import asyncio
import json
import logging
import os
from datetime import datetime
from random import randint, random
from time import sleep
from typing import Callable, List

import boto3
import sqlalchemy as sqla
import telebot
from botocore.errorfactory import ClientError
from dotenv import load_dotenv
from sqlalchemy import Boolean, Column, Integer, String
from sqlalchemy.dialects.sqlite import DATETIME
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy.sql import func
from telebot import asyncio_filters
from telebot.async_telebot import AsyncTeleBot, ExceptionHandler
from telebot.asyncio_storage import StatePickleStorage
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from yaml import SafeLoader, load

# Logging
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)


def log_user_answer(expected: str, answer: str) -> None:
    logger.info(f"Expected: {expected} Answer: {answer}")


# Message content
with open("./text.yaml", "r") as f:
    texts = load(f, SafeLoader)

# Environment variables
dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

TOKEN = os.getenv("TELEGRAM_TOKEN")
BUCKET_NAME = os.getenv("BUCKET_NAME")
PROMO_15 = os.getenv("PROMO_15")
EXCURSION_START = datetime(2022, 10, 1)

# S3 client
boto3_session = boto3.session.Session()
s3 = boto3_session.client(
    service_name="s3",
    endpoint_url="https://storage.yandexcloud.net",
)


def dump_s3(obj, f, rewrite=False):
    """
    Return None if file wasn't created
    """
    try:
        # Check if file exists
        s3.head_object(Bucket=BUCKET_NAME, Key=f)
        if rewrite:
            return s3.put_object(Bucket=BUCKET_NAME, Key=f, Body=json.dumps(obj, ensure_ascii=False))
        else:
            return
    except ClientError:
        # File not found - create new file
        return s3.put_object(Bucket=BUCKET_NAME, Key=f, Body=json.dumps(obj, ensure_ascii=False))


# Local database logic
Base = declarative_base()


def telegram_user_as_dict(data):
    return {
        "id": getattr(data, "id", None),
        "first_name": getattr(data, "first_name", None),
        "last_name": getattr(data, "last_name", None),
        "username": getattr(data, "username", None),
    }


class User(Base):
    __tablename__ = "User"
    # Telegram data
    id = Column(Integer, primary_key=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    username = Column(String, nullable=True)
    # Our data
    try_count = Column(Integer, default=5)
    started_at = Column(DATETIME, nullable=True)
    finished_at = Column(DATETIME, nullable=True)
    is_winner = Column(Boolean, nullable=True)

    def __repr__(self):
        return f"""<User (id={self.id}
            first_name={self.first_name}
            last_name={self.last_name}
            username={self.username}
            try_count={self.try_count}
            started_at={self.started_at}
            finished_at={self.finished_at}
            is_winner={self.is_winner})>"""


def get_or_create(session, model, **kwargs):
    instance = session.query(model).get(kwargs["id"])
    if instance:
        return instance
    else:
        instance = model(**kwargs)
        session.add(instance)
        session.commit()
        return instance


# Initialize database and create tables
engine = sqla.create_engine("sqlite:///data.db", echo=True)
Base.metadata.create_all(engine)
Session = sessionmaker(engine)

# Bot instance
class MyExceptionHandler(ExceptionHandler):
    def handle(self, exception):
        logger.error(exception)


bot = AsyncTeleBot(
    TOKEN,
    parse_mode="Markdown",
    state_storage=StatePickleStorage(),
    exception_handler=MyExceptionHandler(),
)

remove_keyboard = ReplyKeyboardRemove()


def one_btn_keyboard(text: str):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(text)
    return markup


get_going_markup = one_btn_keyboard("–ò–¥–µ–º –¥–∞–ª—å—à–µ")
farewell_markup = one_btn_keyboard("–í –¥–æ–±—Ä—ã–π –ø—É—Ç—å!")
giveup_markup = one_btn_keyboard("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
luther_what_markup = one_btn_keyboard("–¢–∞–∫ –°–º–æ–ª–µ–Ω—Å–∫–æ–µ –∏–ª–∏ –õ—é—Ç–µ—Ä–∞–Ω—Å–∫–æ–µ?")

CONGRATS = ["–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!", "–í–µ—Ä–Ω–æ!", "–ü—Ä–∞–≤–∏–ª—å–Ω–æ", "–í —Ç–æ—á–∫—É!"]


def random_congrats():
    return CONGRATS[randint(0, len(CONGRATS) - 1)]


# Bot helpers
async def log_state(message):
    state = await bot.current_states.get_state(message.from_user.id, message.chat.id)
    logger.info(f"State: {state}")


async def send_messages(
    chat_id: str,
    messages: List[str],
    markup=None,
):
    for msg in messages:
        if isinstance(msg, str):
            await bot.send_message(chat_id, msg, reply_markup=markup)
        else:
            if msg["type"] == "photo":
                await bot.send_photo(
                    chat_id,
                    msg["file_id"],
                    reply_markup=markup,
                    caption=msg.get("caption", None),
                )
            elif msg["type"] == "location":
                await bot.send_location(
                    chat_id,
                    latitude=msg["lat"],
                    longitude=msg["lng"],
                    horizontal_accuracy=25,
                )
            elif msg["type"] == "audio":
                await bot.send_audio(chat_id, msg["file_id"], reply_markup=markup)


# ===== Message handlers =====
@bot.message_handler(state="*", commands=["stats"])
async def stats(message):
    with Session() as s:
        users_count = s.query(func.count(User.id)).scalar()
        users_finished = s.query(func.count(User.id)).filter(User.finished_at != None).scalar()
    msg = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {users_count}\n" f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫–≤–µ—Å—Ç: {users_finished}\n"
    await bot.send_message(message.chat.id, msg)


@bot.message_handler(state="*", commands=["start"])
async def start_ex(message):
    """
    –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.
    """
    # State
    await log_state(message)
    await bot.delete_state(message.from_user.id, message.chat.id)
    await bot.set_state(message.from_user.id, "start", message.chat.id)
    # Messages
    await send_messages(message.chat.id, texts["–≤–≤–æ–¥–Ω–∞—è"], markup=luther_what_markup)
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dict = telegram_user_as_dict(message.from_user)
    # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ s3
    dump_s3(user_dict, f"users/started/{message.from_user.id}.json")
    logger.info(f"Saved user with id {message.from_user.id} to s3://{BUCKET_NAME}/users/started")
    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
    try:
        with Session() as s:
            user = get_or_create(s, User, **user_dict)
            if user.started_at == None:
                user.started_at = datetime.utcnow()
            s.commit()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É", exc_info=e)


@bot.message_handler(state="start")
async def about_luther(message):
    # State
    await log_state(message)
    await bot.set_state(message.from_user.id, "–õ—é—Ç–µ—Ä", message.chat.id)
    # Messages
    await send_messages(message.chat.id, texts["–õ—é—Ç–µ—Ä"], markup=farewell_markup)


@bot.message_handler(state="–õ—é—Ç–µ—Ä")
async def enterance(message):
    # State
    await log_state(message)
    await bot.set_state(message.from_user.id, "–≤—Ö–æ–¥", message.chat.id)
    # Messages
    await send_messages(message.chat.id, texts["–≤—Ö–æ–¥"], markup=get_going_markup)


@bot.message_handler(state="–ß–∏—á–∞–≥–æ–≤–∞")
async def finish_ex(message):
    """
    –§–∏–Ω–∏—à —ç–∫—Å–∫—É—Ä—Å–∏–∏.
    –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≥–µ—Ä–æ—è –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    """
    await log_state(message)
    await bot.set_state(message.from_user.id, "finish", message.chat.id)
    # –ù–∞—à–µ –ø–æ—á—Ç–µ–Ω–∏–µ
    await bot.send_message(message.chat.id, "–£—Ä–∞, —Ç—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ! –ú—ã –∂–µ –≥–æ–≤–æ—Ä–∏–ª–∏, —á—Ç–æ —Ç—ã —Å–º–æ–∂–µ—à—å")
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞ –≤ s3
    user_dict = telegram_user_as_dict(message.from_user)
    dump_s3(user_dict, f"users/finished/{message.from_user.id}.json")
    logger.info(f"Saved user with id {message.from_user.id} to s3://{BUCKET_NAME}/users/finished")
    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
    with Session() as s:
        user = get_or_create(s, User, **user_dict)
        # –ó–∞–ø–∏—à–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if user.finished_at == None:
            user.finished_at = datetime.utcnow()
        s.commit()
    # –õ–æ–≥–∏–∫–∞ –ø–æ –≤—ã–¥–∞—á–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    await bot.send_message(message.chat.id, texts["–ø–æ–±–µ–¥–∞15"].format(PROMO_15))
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é
    if datetime.now() < EXCURSION_START:
        await bot.send_message(message.chat.id, texts["–ø–æ–±–µ–¥–∞30—Å–µ–Ω"])
    else:
        await bot.send_message(message.chat.id, texts["–ø–æ–±–µ–¥–∞1–æ–∫—Ç"])
    # –ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –û–•–í
    await send_messages(message.chat.id, texts["–û–•–í"], markup=remove_keyboard)
    # –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤
    await bot.send_message(
        message.chat.id,
        "–≠—Ç–æ –Ω–∞—à –ø–µ—Ä–≤—ã–π –∫–≤–µ—Å—Ç –ø–æ –∫–ª–∞–¥–±–∏—â—É. –ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –æ—Ç–∑—ã–≤ üôè –õ—é–±–æ–π! –î–∞–∂–µ –ø–ª–æ—Ö–æ–π, –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π",
    )


@bot.message_handler(state="finish")
async def after_finish_ex(message):
    await log_state(message)
    # –°–æ—Ö—Ä–∞–Ω–∏–º –æ—Ç–∑—ã–≤ –≤ s3
    if "–∏–¥–µ–º –¥–∞–ª—å—à–µ" not in message.text.lower():
        dump_s3(message.text, f"users/feedback/{message.from_user.id}/{message.message_id}.json")
    await bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ –Ω–∞–ø–∏—Å–∞–≤ –µ—â—ë –ø–∞—Ä—É –ª–∞—Å–∫–æ–≤—ã—Ö",
    )


answer_checkers = {
    "–≠–Ω–≥–µ–ª—å–≥–∞—Ä–¥—Ç": lambda m: "13" in m,
    "–î–µ—Ä–µ–≤–æ": lambda m: "5" in m,
    "–•–æ—Å–µ": lambda m: "–≥–µ—Å—Å" in m,
    "–ë–µ—Ä–¥": lambda m: "—Ç–∞–º–∞—Ä–∞" in m,
    "–ì—Ä–∏–º–º": lambda m: "1933" in m,
    "–ü–∞—Ä–ª–∞–Ω–¥": lambda m: "–æ–±–ø" in m or "–æ.–±.–ø." in m or "–æ–±–ª—Å–æ–≤–µ—Ç" in m or "–æ—Å–æ–∞–≤–∏–∞—Ö–∏–º" in m,
    "–°–∏–º–∞–Ω—Å–∫–∏–π": lambda m: "—Å–µ–≤–∫–∞–±–µ–ª—å" in m,
    "–ü—Ä–æ—Ä–æ–∫–æ–≤": lambda m: "—Ñ–∞–Ω–¥–µ—Ä" in m or "—Ñ–ª–∏—Ç" in m,
    "–ß–∏–Ω–∏–∑–µ–ª–ª–∏": lambda m: "34" in m,
    "–ì–æ—Ä–≤–∏—Ü": lambda m: "—Ç–æ–≤–∞—Ä–∏—â–∏" in m,
    "–ì—Ä–µ–π–≥": lambda m: "–ø—Ä–∞—Å–∫–æ–≤" in m,
    "–ë–∞—É—ç—Ä–º–∞–π—Å—Ç–µ—Ä": lambda m: "–æ—Å—Ç—Ä–æ–≤" in m or "–º–µ—Ä—Ç–≤—ã—Ö" in m,
    "–ë–µ–∫–º–∞–Ω": lambda m: "xii" in m or "12" in m,
    "–í–æ–ª—å—Ñ": lambda m: "–ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã" in m,
    "–ì–æ–ª–≥–æ—Ñ–∞": lambda m: "—á–µ—Ä–µ–ø" in m,
    "–ß–∏—á–∞–≥–æ–≤–∞": lambda m: "—É—Ä–æ–±–æ—Ä–æ—Å" in m,
}


class QuestionHandler:
    def __init__(self, step: str, prev_step: str, is_correct: Callable[[str], bool]):
        self.step = step
        self.is_correct = is_correct

        bot.register_message_handler(self.question, state=prev_step)
        bot.register_message_handler(self.answer, state=f"–°–ø—Ä–æ—Å–∏–ª_{self.step}")

    async def question(self, message):
        await log_state(message)
        await bot.set_state(message.from_user.id, f"–°–ø—Ä–æ—Å–∏–ª_{self.step}", message.chat.id)
        await send_messages(
            message.chat.id,
            texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"][self.step]["–≤–æ–ø—Ä–æ—Å"],
            markup=remove_keyboard,
        )

    async def answer(self, message):
        await log_state(message)
        log_user_answer(texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"][self.step]["–æ—Ç–≤–µ—Ç"], message.text)
        with Session() as s:
            user_dict = telegram_user_as_dict(message.from_user)
            user = get_or_create(s, User, **user_dict)
            try_count = user.try_count
            user_gave_up = "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å" in message.text.lower() and try_count > 0
            user_answered = self.is_correct(message.text.lower())
            if user_gave_up or user_answered:
                await bot.set_state(message.from_user.id, f"{self.step}", message.chat.id)
                if self.is_correct(message.text.lower()):
                    await bot.send_message(message.chat.id, random_congrats())
                await send_messages(message.chat.id, texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"][self.step].get("–∫—Å—Ç–∞—Ç–∏", []))
                await bot.send_message(
                    message.chat.id,
                    "–ù–∞–∂–º–∏ '–ò–¥–µ–º –¥–∞–ª—å—à–µ', –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é",
                    reply_markup=get_going_markup,
                )
                if user_gave_up:
                    user.try_count -= 1
            else:
                # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏
                if try_count > 0:
                    await bot.send_message(
                        message.chat.id,
                        f"–ú–æ–∂–µ—à—å –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ—â—ë {try_count} –≤–æ–ø—Ä–æ—Å–æ–≤",
                        reply_markup=giveup_markup,
                    )
                # –°–ª–µ–¥—É—é—â–∏–µ –ø–æ–ø—ã—Ç–∫–∏
                else:
                    await bot.send_message(
                        message.chat.id, "–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–æ–ª—å—à–µ –Ω–µ—Ç"
                    )
            s.commit()
            s.close()


# –ù–∞–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—Å—Ç–∞–º–∏
prev_step = "–≤—Ö–æ–¥"
for point in texts["—ç–∫—Å–∫—É—Ä—Å–∏—è"].keys():
    try:
        checker = answer_checkers[point]
    except KeyError:
        raise RuntimeError(f"–ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {point}")
    QuestionHandler(step=point, prev_step=prev_step, is_correct=checker)
    prev_step = point


bot.add_custom_filter(asyncio_filters.StateFilter(bot))

# Polling

while True:
    try:
        asyncio.run(bot.infinity_polling())
    except KeyboardInterrupt:
        break
    except Exception as ex:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–ª–∏–Ω–≥–µ. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å.", exc_info=ex)
        sleep(10)
        continue
